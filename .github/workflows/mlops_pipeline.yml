name: MLOps Pipeline

on:
  workflow_dispatch:
    inputs:
      run_option:
        description: 'Chọn chế độ: all (chạy toàn bộ pipeline)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dataset
          - train
          - eval

jobs:

  provision_infrastructure:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_option == 'all' }}
    steps:
          
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Set up SSH key
        run: |
          ls
          cd infra/vpc-ec2-sg-remote-backend-kltn
          ls
          echo "${{ secrets.EMR_KEY }}" > emr.pem
          chmod 600 emr.pem
          ls
     
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          
      - name: Configure AWS CLI
        run: |
            # aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            # aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            # aws configure set region us-east-1
            # aws configure list
            mkdir -p ~/.aws
            touch ~/.aws/credentials
            echo "${{ secrets.AWS_KEY }}" > ~/.aws/credentials
            aws sts get-caller-identity
            aws configure set region us-east-1
        
      - name: Install Terraform
        run: |
          sudo snap install terraform --classic
          sudo terraform version

      - name: Initialize Terraform
        run: |
          ls
          cd infra/vpc-ec2-sg-remote-backend-kltn
          ls
          terraform init
          terraform validate
          terraform plan
          terraform apply -auto-approve

      - name: Update HOST variable
        run: |
          
          cd infra/vpc-ec2-sg-remote-backend-kltn
          export HOST_VALUE=$(terraform output -raw instance_public_ip)
          echo $HOST_VALUE
          export GITHUB_TOKEN=${{ secrets.GIT_TOKEN }}
          curl -X PATCH \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/TranChucThien/kltn-sentiment-monitoring-mlops/actions/variables/HOST \
            -d "{\"name\":\"HOST\",\"value\":\"$HOST_VALUE\"}"


        env:
          PRIVATE_KEY: ${{ secrets.EMR_KEY }}

      - name: Update repository on host
        run: |
          cd infra/vpc-ec2-sg-remote-backend-kltn
          echo "IP Address of the EC2 instance: ${{ vars.HOST }}"
          ssh -i "emr.pem" -o StrictHostKeyChecking=no ubuntu@${{ vars.HOST }} << 'EOF'
            cd /home/ubuntu/kltn-sentiment-monitoring-mlops || exit
            git pull origin main
          EOF

  
  dataset_preparation:
    if: ${{ github.event.inputs.run_option == 'all' || github.event.inputs.run_option == 'dataset' }}
    needs: provision_infrastructure
    runs-on: ubuntu-latest
    steps:
    - name: Set up SSH key
      run: |
        echo "${{ secrets.EMR_KEY }}" > emr.pem
        chmod 600 emr.pem
        ls
        
    - name: SSH to EC2 instance and run commands
      run: |
        ssh -i "emr.pem" -o StrictHostKeyChecking=no ubuntu@${{ vars.HOST }} << 'EOF'
          echo "Connected successfully!"
          ls
          whoami
          cd /home/ubuntu/kltn-sentiment-monitoring-mlops || exit
          python3 main.py dataset
        EOF
      env:
        PRIVATE_KEY: ${{ secrets.EMR_KEY }}
        
  training_count_vectorizer:
    if: ${{ github.event.inputs.run_option == 'all'  }}
    needs: dataset_preparation
    runs-on: ubuntu-latest
    steps:
    - name: Set up SSH key
      run: |
        echo "${{ secrets.EMR_KEY }}" > emr.pem
        chmod 600 emr.pem
    - name: SSH to EC2 and run training
      run: |
        ssh -i "emr.pem" -o StrictHostKeyChecking=no ubuntu@${{ vars.HOST }} << 'EOF'
          cd /home/ubuntu/kltn-sentiment-monitoring-mlops || exit
          python3 main.py train_count_vector
        EOF
        
  training_hashing_tf:
    if: ${{ github.event.inputs.run_option == 'all'  }}
    needs: dataset_preparation
    runs-on: ubuntu-latest
    steps:
    - name: Set up SSH key
      run: |
        echo "${{ secrets.EMR_KEY }}" > emr.pem
        chmod 600 emr.pem
    - name: SSH to EC2 and run training
      run: |
        ssh -i "emr.pem" -o StrictHostKeyChecking=no ubuntu@${{ vars.HOST }} << 'EOF'
          cd /home/ubuntu/kltn-sentiment-monitoring-mlops || exit
          python3 main.py train_hashing_tf
        EOF

  evaluate_count_vectorizer:
    if: ${{ github.event.inputs.run_option == 'all' }}
    needs: [training_count_vectorizer]
    runs-on: ubuntu-latest
    steps:
    - name: Set up SSH key
      run: |
        echo "${{ secrets.EMR_KEY }}" > emr.pem
        chmod 600 emr.pem
    - name: SSH to EC2 and run training
      run: |
        ssh -i "emr.pem" -o StrictHostKeyChecking=no ubuntu@${{ vars.HOST }} << 'EOF'
          cd /home/ubuntu/kltn-sentiment-monitoring-mlops || exit
          python3 main.py eval_count_vector
        EOF

  evaluate_hashing_tf:
    if: ${{ github.event.inputs.run_option == 'all' }}
    needs: [training_hashing_tf]
    runs-on: ubuntu-latest
    steps:
    - name: Set up SSH key
      run: |
        echo "${{ secrets.EMR_KEY }}" > emr.pem
        chmod 600 emr.pem
    - name: SSH to EC2 and run training
      run: |
        ssh -i "emr.pem" -o StrictHostKeyChecking=no ubuntu@${{ vars.HOST }} << 'EOF'
          cd /home/ubuntu/kltn-sentiment-monitoring-mlops || exit
          python3 main.py eval_hashing_tf
        EOF

  training_standalone:
    if: ${{ github.event.inputs.run_option == 'train' }}
    runs-on: ubuntu-latest
    steps:
    - name: Set up SSH key
      run: |
        echo "${{ secrets.EMR_KEY }}" > emr.pem
        chmod 600 emr.pem
        ls
        
    - name: SSH to EC2 instance and run commands
      run: |
        ssh -i "emr.pem" -o StrictHostKeyChecking=no ubuntu@${{ vars.HOST }} << 'EOF'
          echo "Connected successfully!"
          ls
          whoami
          cd /home/ubuntu/kltn-sentiment-monitoring-mlops || exit
          python3 main.py train
        EOF
      env:
        PRIVATE_KEY: ${{ secrets.EMR_KEY }}
        
  evaluate_standalone:
    if: ${{ github.event.inputs.run_option == 'eval' }}
    runs-on: ubuntu-latest
    steps:
    - name: Set up SSH key
      run: |
        echo "${{ secrets.EMR_KEY }}" > emr.pem
        chmod 600 emr.pem
    - name: SSH to EC2 and run training
      run: |
        ssh -i "emr.pem" -o StrictHostKeyChecking=no ubuntu@${{ vars.HOST }} << 'EOF'
          cd /home/ubuntu/kltn-sentiment-monitoring-mlops || exit
          python3 main.py eval
        EOF

  cleaning_infrastructure:
    needs: [evaluate_count_vectorizer, evaluate_hashing_tf] 
    runs-on: ubuntu-latest
    steps:
          
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Set up SSH key
        run: |
          ls
          cd infra/vpc-ec2-sg-remote-backend-kltn
          ls
          echo "${{ secrets.EMR_KEY }}" > emr.pem
          chmod 600 emr.pem
          ls
      
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          
      - name: Configure AWS CLI
        run: |
            # aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            # aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            # aws configure set region us-east-1
            # aws configure list
            mkdir -p ~/.aws
            touch ~/.aws/credentials
            echo "${{ secrets.AWS_KEY }}" > ~/.aws/credentials
            aws sts get-caller-identity
            aws configure set region us-east-1
        
      - name: Install Terraform
        run: |
          sudo snap install terraform --classic
          sudo terraform version
      - name: Cleaning infra 
        run: |
          ls
          cd infra/vpc-ec2-sg-remote-backend-kltn
          ls
          terraform init
          terraform destroy -auto-approve

  notify_success:
    if: ${{ success() }}
    runs-on: ubuntu-latest
    needs: [cleaning_infrastructure]
    steps:
    - name: Send success email
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "MLOps Pipeline Success"
        body: |
         The MLOps pipeline has completed successfully.
         View the logs here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
         
        to: ${{ secrets.NOTIFY_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        

  notify_failure:
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    needs: [cleaning_infrastructure]
    steps:
    - name: Send failure email
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "MLOps Pipeline Failure"
        body: |
          The MLOps pipeline has failed.
          Please check the logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        to: ${{ secrets.NOTIFY_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        
